apiVersion: v1
kind: Secret
metadata:
  name:  {{ include "postgres.secret.name" . | quote }}
  namespace: {{ .Values.namespace }}
  labels: {{- include "postgres.labels" . | nindent 4 }}
type: Opaque
data:
{{- $existingSecrets := lookup "v1" "Secret" .Release.Namespace ( include "postgres.secret.name" .)}}
{{- if $existingSecrets }}
    POSTGRES_USER: {{ get $existingSecrets.data "POSTGRES_USER"}}
    POSTGRES_PASSWORD: {{ get $existingSecrets.data "POSTGRES_PASSWORD"}}
    ca.crt: {{ get $existingSecrets.data "ca.crt"}}
    tls.crt: {{ get $existingSecrets.data "tls.crt"}}
    tls.key: {{ get $existingSecrets.data "tls.key"}}
{{- else }}
    POSTGRES_USER: cG9zdGdyZXM=
    POSTGRES_PASSWORD: cG9zdGdyZXM=
{{- $altNames := list ( include "postgres.app.name" .) ( printf "%s-%s" (include "postgres.app.name" .) .Release.Name) ( printf "%s-%s.svc" ( include "postgres.app.name" .) .Release.Namespace) -}}
{{- $ca := genCA (include "postgres.app.name" . ) 3650 -}}
{{- $cert := genSignedCert ( include "postgres.app.name" . ) nil $altNames 3650 $ca }}
    ca.crt:  {{ $ca.Cert | b64enc | quote}}
    tls.crt: {{ $cert.Cert | b64enc | quote}}
    tls.key: {{ $cert.Key | b64enc | quote}}     
{{- end -}}
